params {
    // Pipeline steps
    help         = false
    ribo_qc      = true      // Generate QC figures
    run_orfquant = true // ORF calling with ORFquant
    run_price    = true    // ORF calling with PRICE
    annotation   = false  // ORF annotation & harmonisation
    expression   = false  // ORF expression
 
    // Input files and paths
    project_folder = "./"
    outdir         = "${params.project_folder}/output"
    input          = null
    
    resource_folder     = null
    container_folder    = null
    pandoc_dir          = null // Location in container where pandoc is installed for RMD knitting
    package_install_loc = null // Location where to install BSGenome package for annotation
    gedi_exec_loc       = null // Placeholder until gedi container works

    // Reference files
    reference_gtf       = null // this can either be a custom transcriptome or an ensembl ref GTF
    reference_fasta     = null // Genome assembly in FASTA format
    reference_twobit    = null // Required for R annotation generation
    contaminants_fasta  = null // we have an example fasta in ./assets/
    
    // Can be supplied, can also be generated by the pipeline
    orfquant_annotation    = null // R annotation file required for ORFquant
    orfquant_annot_package = null // R package with annotation files
    star_index_path        = null // STAR index path
    bowtie2_index_path     = null // Bowtie2 index path
    price_index_path       = null// PRICE index path

    // Output options
    orfquant_prefix = "orfquant_test" // naming of merged ORFquant files
    price_prefix    = "price_test"    // naming of merged PRICE files
}

manifest {
    name            = 'nf_ribo_pipeline'
    author          = 'Jip van Dinter, Damon Hofman, Edwin van der Werf'
    homePage        = 'https://github.com/VanHeeschTools/nf_ribo_pipeline/'
    defaultBranch   = 'main'
    description     = 'Ribosome profiling pipeline that includes scrubbing sequences, alignment, QC, P-site cut-off calculations and ORF annotation by multiple ORF callers'
    mainScript      = 'main.nf'
    nextflowVersion = '>=23.04.4'
    version         = 'v0.1'
}

plugins {
    id 'nf-schema@2.0.0'
}

executor {
    $slurm {
        queueSize = 30
        pollInterval = '30sec'
        queueStatInterval = '5min'
    }
}

profiles {
    local {
        process.executor = 'local'
        process.cpus     = 2
        process.memory   = '10GB'
    }
    slurm {
        process.executor  = 'slurm'
        process.queue     = 'cpu'
    }
}

singularity {
    enabled    = true
    autoMounts = true
    pull       = 'never'
}


// Execution reports
// Create unique log files using the timestamp
def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')

timeline {
    enabled = true
    overwrite = true
    file = "${params.project_folder}/log/timeline_${trace_timestamp}.html"
}

report {
    enabled = true
    overwrite = true
    file = "${params.project_folder}/log/report_${trace_timestamp}.html"
}

trace {
    enabled = true
    overwrite = true
    file = "${params.project_folder}/log/trace_${trace_timestamp}.txt"
}

includeConfig 'configs/base.config'
