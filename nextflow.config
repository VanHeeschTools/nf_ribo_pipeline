params {
    // Input files and paths
    project_folder = "./"
    reads_path = null         // Location of the riboseq reads
    reference_gtf = null      // Custom transcriptome or Ensembl ref GTF
    reference_fasta = null    // Genome fasta
    contaminants_fasta = null // Example fasta in ./assets/
    r_annotation_file = null  // R annotation file required for ORFquant
    star_index_path = null    // STAR index file
    price_index = null        // PRICE index file
    bowtie2_index = null      // bowtie2 index file
    bam_path = null           // location of BAM files if no reads are presented

    // Output options
    outdir = "${params.project_folder}/analysis"
    keep_sam = false          // Keep contaminant SAMs for debugging

    // Pipeline steps
    run_selection = true
    run_alignment = true
    run_orfquant = true       // ORF calling with ORFquant
    run_price = true          // ORF calling with PRICE
    run_ribo_qc = true
    run_expression = true
    run_annotation = true
}

manifest {
    name            = 'jipvandinter/nf_ribo_pipeline'
    author          = 'Jip van Dinter, Damon Hofman'
    homePage        = 'https://github.com/jipvandinter/nf_ribo_pipeline/'
    defaultBranch   = 'main'
    description     = 'Ribosome profiling pipeline that includes scrubbing sequences, alignment, QC, P-site cut-off calculations and ORF annotation by multiple ORF callers'
    mainScript      = 'main.nf'
    nextflowVersion = '>=23.04.4'
    version         = 'v0.1'
}

standard {
        process.executor = 'local'
        process.cpus = { task.attempt > 1 ? 4 : 2 }
        process.memory = { task.attempt > 1 ? '20.GB' : '10.GB' }
        process.maxRetries = 3
        process.errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    }
    
    slurm {
        process.executor = 'slurm'
        process.queue = 'cpu'
        process.cpus = { task.attempt > 1 ? 8 : 4 }
        process.memory = { task.attempt > 1 ? '48.GB' : '24.GB' }
        process.queueSize = 20
        process.maxRetries = 3
        process.errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    }

    docker {
        docker.enabled = true
        docker.runOptions = '-u $(id -u):$(id -g)'
    }

singularity {
    enabled = true
    autoMounts = true
}

// Execution reports
// GROOVY START
// Create unique log files using the timestamp
def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
// GROOVY END

timeline {
    enabled = true
    overwrite = true
    file = "${params.project_folder}/log/timeline_${trace_timestamp}.html"
}

report {
    enabled = true
    overwrite = true
    file = "${params.project_folder}/log/report_${trace_timestamp}.html"
}

trace {
    enabled = true
    overwrite = true
    file = "${params.project_folder}/log/trace_${trace_timestamp}.txt"
}
