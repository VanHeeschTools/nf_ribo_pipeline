params {
    // Run parameters
    outdir = "./test/output"
    input = "./documentation/test_samplesheet.csv"
    container_folder = "/hpc/local/Rocky8/pmc_vanheesch/singularity_images"
}

slurm {
        process.executor = 'slurm'
        process.queue = 'cpu'
        process.cpus = { task.attempt > 1 ? 8 : 4 }
        process.memory = { task.attempt > 1 ? '48.GB' : '24.GB' }
        process.queueSize = 20
        process.maxRetries = 3
        process.errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    }

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

process {
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 10.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    // memory errors which should be retried. otherwise error out
    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = '-1'

    // Process-specific resource requirements
    withName: 'trimming' {
        cpus = { check_max( 2   * task.attempt, 'cpus'   ) }
        memory =  { check_max( 10.GB * task.attempt, 'memory' ) }
        time = { check_max( 6.h  * task.attempt, 'time'    ) }
    }
    withName: 'fastqc' {
        cpus = { check_max( 1   * task.attempt, 'cpus'   ) }
        memory =  { check_max( 1.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h  * task.attempt, 'time'    ) }
    }
}

docker {
        docker.enabled = false
        docker.runOptions = '-u $(id -u):$(id -g)'
    }

apptainer {
    enabled = true
    runOptions = '--bind /hpc:/hpc'
}

// Execution reports
// Create unique log files using the timestamp
def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')

//Set containers each process
process {
    withName:trimming {
        container = "${params.container_folder}/fastp_0.23.4--hadf994f_2.sif"
    }
    withName:fastqc {
        container = "${params.container_folder}/trimgalore-0.6.6.sif"
    }
    /* withName:bowtie2 {
        container = "${params.container_folder}/bowtie2-1.0.1a.sif"
    }
    withName:bowtie2_index {
        container = "${params.container_folder}/stringtie-2.1.5.sif"
    }
    withName:STAR {
        container = "${params.container_folder}/STAR-2.7.8a.sif"
    }
    withName:samtools {
        container = "${params.container_folder}/samtools-1.12.sif"
    } */
}
