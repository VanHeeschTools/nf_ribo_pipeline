def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

executor {
    $slurm {
        queueSize = 30
        pollInterval = '30sec'
        queueStatInterval = '5min'

    }
}

profiles {
    local {
        process.executor = 'local'
        process.cpus     = 2
        process.memory   = '10GB'
    }
    slurm {
        process.executor  = 'slurm'
        process.queue     = 'cpu'
    }
}

apptainer {
    enabled = true
    runOptions = '--bind /hpc:/hpc'
}

process {
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 10.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    // memory errors which should be retried. otherwise error out
    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = '-1'

    // Process-specific resource requirements
    withName: 'trimming' {
        cpus = { check_max( 1   * task.attempt, 'cpus'   ) }
        memory =  { check_max( 2.GB * task.attempt, 'memory' ) }
        time = { check_max( 6.h  * task.attempt, 'time'    ) }
        container = "${params.container_folder}/fastp_0.23.4--hadf994f_2.sif"
    }
    withName: 'fastqc' {
        cpus = { check_max( 1   * task.attempt, 'cpus'   ) }
        memory =  { check_max( 1.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h  * task.attempt, 'time'    ) }
        container = "${params.container_folder}/trimgalore-0.6.6.sif"
    }
    withName: 'bowtie2_index' {
        cpus = { check_max( 1   * task.attempt, 'cpus'   ) }
        memory =  { check_max( 4.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h  * task.attempt, 'time'    ) }
        container = "${params.container_folder}/bowtie2-2.4.2.sif"
    }
    withName: 'bowtie2' {
        cpus = { check_max( 1   * task.attempt, 'cpus'   ) }
        memory =  { check_max( 4.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h  * task.attempt, 'time'    ) }
        container = "${params.container_folder}/bowtie2-2.4.2.sif"
    }
    withName: 'contaminants_check' {
        cpus = { check_max( 1   * task.attempt, 'cpus'   ) }
        memory =  { check_max( 4.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h  * task.attempt, 'time'    ) }
        container = "${params.container_folder}/samtools-1.12.sif"
    }
    withName: 'star_index' {
        cpus = { check_max( 1   * task.attempt, 'cpus'   ) }
        memory =  { check_max( 4.GB * task.attempt, 'memory' ) }
        time = { check_max( 1.h  * task.attempt, 'time'    ) }
        container = "${params.container_folder}/STAR-2.7.8a.sif"
    }
    withName: 'align' {
        cpus = { check_max( 4   * task.attempt, 'cpus'   ) }
        memory =  { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 12.h  * task.attempt, 'time'    ) }
        container = "${params.container_folder}/STAR-2.7.8a.sif"
    }
    withName: 'samtools' {
        cpus = { check_max( 4   * task.attempt, 'cpus'   ) }
        memory =  { check_max( 8.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h  * task.attempt, 'time'    ) }
        container = "${params.container_folder}/samtools-1.12.sif"
    }
    withName: 'riboseqc' {
        cpus = { check_max( 1   * task.attempt, 'cpus'   ) }
        memory =  { check_max( 24.GB * task.attempt, 'memory' ) }
        time = { check_max( 6.h  * task.attempt, 'time'    ) }
        container = "${params.container_folder}/orfquant-4.1.2b.sif"
    }
    withName: 'multiqc' {
        cpus = { check_max( 1   * task.attempt, 'cpus'   ) }
        memory =  { check_max( 2.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h  * task.attempt, 'time'    ) }
        container = "${params.container_folder}/multiqc-1.11.sif"
    }
    withName: 'orfquant' {
        cpus = { check_max( 24   * task.attempt, 'cpus'   ) }
        memory =  { check_max( 120.GB * task.attempt, 'memory' ) }
        time = { check_max( 144.h  * task.attempt, 'time'    ) }
        container = "${params.container_folder}/orfquant-4.1.2b.sif"
    }
    withName: 'price_orfcall' {
        cpus = { check_max( 1   * task.attempt, 'cpus'   ) }
        memory =  { check_max( 24.GB * task.attempt, 'memory' ) }
        time = { check_max( 6.h  * task.attempt, 'time'    ) }
    }
    withName: 'price_index' {
        cpus = { check_max( 1   * task.attempt, 'cpus'   ) }
        memory =  { check_max( 24.GB * task.attempt, 'memory' ) }
        time = { check_max( 2.h  * task.attempt, 'time'    ) }
    }

}
/* 
// Execution reports
// Create unique log files using the timestamp
def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')

timeline {
    enabled = true
    overwrite = true
    file = "${params.project_folder}/log/timeline_${trace_timestamp}.html"
}

report {
    enabled = true
    overwrite = true
    file = "${params.project_folder}/log/report_${trace_timestamp}.html"
}

trace {
    enabled = true
    overwrite = true
    file = "${params.project_folder}/log/trace_${trace_timestamp}.txt"
}

// TODO: finish extracting requirements and publishDir (?) */
