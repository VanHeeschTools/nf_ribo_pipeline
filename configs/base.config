params {
    max_memory                 = '400.GB'
    max_cpus                   = 30
    max_time                   = '250.h'
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

//apptainer {
//    enabled = true
//    runOptions = '--bind /hpc:/hpc'
//}

process {
    cpus   = { check_max( 1    * task.attempt, 'cpus' ) }
    memory = { check_max( 10.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time' ) }

    // memory errors which should be retried. otherwise error out
    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = '-1'

    // Process-specific resource requirements
    withName: 'read_trimming' {
        cpus = { check_max( 10   * task.attempt, 'cpus' ) }
        memory =  { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h  * task.attempt, 'time' ) }
    }
    withName: 'trimgalore' {
        cpus = { check_max( 10  * task.attempt, 'cpus' ) }
        memory =  { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h  * task.attempt, 'time' ) }
    }
    withName: 'fastqc' {
        cpus = { check_max( 5   * task.attempt, 'cpus' ) }
        memory =  { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h  * task.attempt, 'time' ) }
    }
    withName: 'bowtie2_index' {
        cpus = { check_max( 10   * task.attempt, 'cpus' ) }
        memory =  { check_max( 32.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h  * task.attempt, 'time' ) }
    }
    withName: 'bowtie2' {
        cpus = { check_max( 18   * task.attempt, 'cpus' ) }
        memory =  { check_max( 24.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h  * task.attempt, 'time' ) }
    }
    withName: 'contaminants_check' {
        cpus = { check_max( 2   * task.attempt, 'cpus' ) }
        memory =  { check_max( 16.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h  * task.attempt, 'time' ) }
    }
    withName: 'star_index' {
        cpus = { check_max( 1   * task.attempt, 'cpus' ) }
        memory =  { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h  * task.attempt, 'time' ) }
    }
    withLabel: 'alignment' {
        cpus = { check_max( 16   * task.attempt, 'cpus' ) }
        memory =  { check_max( 80.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h  * task.attempt, 'time' ) }
    }
    withName: 'samtools' {
        cpus = { check_max( 10   * task.attempt, 'cpus' ) }
        memory =  { check_max( 64.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h  * task.attempt, 'time' ) }
    }
    withName: 'create_annotation' {
        cpus = { check_max( 1   * task.attempt, 'cpus' ) }
        memory =  { check_max( 24.GB * task.attempt, 'memory' ) }
        time = { check_max( 6.h  * task.attempt, 'time' ) }
    }
    withName: 'riboseqc' {
        cpus = { check_max( 5  * task.attempt, 'cpus' ) }
        memory =  { check_max( 48.GB * task.attempt, 'memory' ) }
        time = { check_max( 6.h  * task.attempt, 'time' ) }
    }
    withName: 'prepare_orfquant' {
        cpus = { check_max( 1   * task.attempt, 'cpus' ) }
        memory =  { check_max( 24.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h  * task.attempt, 'time' ) }
    }
    withName: 'merge_price_bams' {
        cpus = { check_max( 10   * task.attempt, 'cpus' ) }
        memory =  { check_max( 100.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h  * task.attempt, 'time' ) }
    }
    withName: 'orfquant' {
        cpus = { check_max( 35   * task.attempt, 'cpus' ) }
        memory =  { check_max( 150.GB * task.attempt, 'memory' ) }
        time = { check_max( 200.h  * task.attempt, 'time' ) }
    }
    withName: 'price' {
        cpus = { check_max( 35   * task.attempt, 'cpus' ) }
        memory =  { check_max( 300.GB * task.attempt, 'memory' ) }
        time = { check_max( 150.h  * task.attempt, 'time' ) }
    }
    withName: 'price_index' {
        cpus = { check_max( 10   * task.attempt, 'cpus' ) }
        memory =  { check_max( 48.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h  * task.attempt, 'time' ) }
    }
    withName: 'annotate_orfs' {
        cpus = { check_max( 1   * task.attempt, 'cpus' ) }
        memory =  { check_max( 48.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h  * task.attempt, 'time' ) }
    }
    withName: 'orfcaller_psites' {
        cpus = { check_max( 4   * task.attempt, 'cpus' ) }
        memory =  { check_max( 24.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h  * task.attempt, 'time' ) }
    }
    withName: 'merge_orfcaller_psites' {
        cpus = { check_max( 16   * task.attempt, 'cpus' ) }
        memory =  { check_max( 150.GB * task.attempt, 'memory' ) }
        time = { check_max( 48.h  * task.attempt, 'time' ) }
    }
    withName: 'ref_psites' {
        cpus = { check_max( 4   * task.attempt, 'cpus' ) }
        memory =  { check_max( 24.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h  * task.attempt, 'time' ) }
    }
    withName: 'ppm_matrix' {
        cpus = { check_max( 1   * task.attempt, 'cpus' ) }
        memory =  { check_max( 24.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h  * task.attempt, 'time' ) }
    }
    withName: 'parse_genomic_features' {
        cpus = { check_max( 10   * task.attempt, 'cpus' ) }
        memory =  { check_max( 48.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h  * task.attempt, 'time' ) }
    }
    withName: 'parse_samples' {
        cpus = { check_max( 20   * task.attempt, 'cpus' ) }
        memory =  { check_max( 200.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h  * task.attempt, 'time' ) }
    }
    withName: 'ribotie_predict_samples' {
        queue = 'gpu'
        clusterOptions = { "--gpus-per-node=1" }
        cpus = { check_max( 24   * task.attempt, 'cpus' ) }
        memory =  { check_max( 300.GB * task.attempt, 'memory' ) }
        time = { check_max( 48.h  * task.attempt, 'time'    ) }
    }
}